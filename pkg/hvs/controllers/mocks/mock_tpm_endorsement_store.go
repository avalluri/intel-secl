// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/hvs/domain/contracts.go

// Package mock_domain is a generated GoMock package.
package mocks

import (
	uuid "github.com/google/uuid"
	"github.com/intel-secl/intel-secl/v3/pkg/hvs/domain/models"
	commErr "github.com/intel-secl/intel-secl/v3/pkg/lib/common/err"
	hvs "github.com/intel-secl/intel-secl/v3/pkg/model/hvs"
	"github.com/pkg/errors"
	"strconv"
	"strings"
)

// MockTpmEndorsementStore is a mock of TpmEndorsementStore interface
type MockTpmEndorsementStore struct {
	tpmEndorsementStores []*hvs.TpmEndorsement
}

// Create mocks base method
func (m *MockTpmEndorsementStore) Create(arg0 *hvs.TpmEndorsement) (*hvs.TpmEndorsement, error) {
	m.tpmEndorsementStores = append(m.tpmEndorsementStores, arg0)
	return arg0, nil
}

func (m *MockTpmEndorsementStore) Update(arg0 *hvs.TpmEndorsement) (*hvs.TpmEndorsement, error) {
	return arg0, nil
}

// Retrieve mocks base method
func (m *MockTpmEndorsementStore) Retrieve(id uuid.UUID) (*hvs.TpmEndorsement, error) {
	for _, te := range m.tpmEndorsementStores {
		if te.ID == id {
			return  te, nil
		}
	}

	return nil, errors.New(commErr.RowsNotFound)
}


// Search mocks base method
func (m *MockTpmEndorsementStore) Search(teFilter *models.TpmEndorsementFilterCriteria) (*hvs.TpmEndorsementCollection, error) {
	if teFilter == nil {
		return &hvs.TpmEndorsementCollection{TpmEndorsement: m.tpmEndorsementStores}, nil
	}
	tpmEndorsements := []*hvs.TpmEndorsement{}
	if teFilter.Id != "" {
		id := uuid.MustParse(teFilter.Id)
		te, _ := m.Retrieve(id)
		tpmEndorsements = append(tpmEndorsements, te)
	} else if teFilter.IssuerEqualTo != "" {
		for _, te := range m.tpmEndorsementStores {
			if te.Issuer == teFilter.IssuerEqualTo {
				tpmEndorsements = append(tpmEndorsements, te)
			}
		}
	} else if teFilter.CommentContains != "" {
		for _, te := range m.tpmEndorsementStores {
			if strings.Contains(te.Comment, teFilter.CommentContains) {
				tpmEndorsements = append(tpmEndorsements, te)
			}
		}
	} else if teFilter.CommentEqualTo != "" {
		for _, te := range m.tpmEndorsementStores {
			if te.Comment == teFilter.CommentEqualTo {
				tpmEndorsements = append(tpmEndorsements, te)
			}
		}
	} else if teFilter.RevokedEqualTo != "" {
		for _, te := range m.tpmEndorsementStores {
			revoked,_  := strconv.ParseBool(teFilter.RevokedEqualTo)
			if te.Revoked == revoked {
				tpmEndorsements = append(tpmEndorsements, te)
			}
		}
	} else if teFilter.HardwareUuidEqualTo != "" {
		hwUuid := uuid.MustParse(teFilter.HardwareUuidEqualTo)
		for _, te := range m.tpmEndorsementStores {
			if te.HardwareUUID == hwUuid {
				tpmEndorsements = append(tpmEndorsements, te)
			}
		}
	} else if teFilter.IssuerContains != "" {
		for _, te := range m.tpmEndorsementStores {
			if strings.Contains(te.Issuer, teFilter.IssuerContains) {
				tpmEndorsements = append(tpmEndorsements, te)
			}
		}
	}

	return  &hvs.TpmEndorsementCollection{TpmEndorsement: tpmEndorsements}, nil
}


// Delete mocks base method
func (m *MockTpmEndorsementStore) Delete(id uuid.UUID) error {
	for i, te := range m.tpmEndorsementStores {
		if m.tpmEndorsementStores[i] == nil{
			continue
		}
		if te.ID == id {
			m.tpmEndorsementStores[i] = nil
			return nil
		}
	}
	return errors.New(commErr.RowsNotFound)
}

func NewFakeTpmEndorsementStore () *MockTpmEndorsementStore{
	store := &MockTpmEndorsementStore{}
	store.Create(&hvs.TpmEndorsement{
		ID:           uuid.MustParse("ee37c360-7eae-4250-a677-6ee12adce8e2"),
		HardwareUUID: uuid.MustParse("ee37c360-7eae-4250-a677-6ee12adce8e3"),
		Issuer:       "CN=Infineon OPTIGA(TM) RSA Manufacturing CA 007,OU=OPTIGA(TM) TPM2.0,O=Infineon Technologies AG,C=DE",
		Comment:      "",
		Revoked:      false,
		Certificate:  "30820122300d06092a864886f70d01010105000382010f003082010a0282010100919eb68d44dfb84a08519c0d8eca57aa37798286769446b42090bad2375dd78e44e7c8dc85400bae3b6a923b6fbe7eeeaf17ac1a95f681d82ca1dc\n33fc4ac389b8f3f73c5b7a91c1096b99729fc6099eb8a11b19c795a88dafacc1e2a381a10d16fea697880cdf270ce10df30ed377e88e48be5004db1e2c2b52f04d9f292be21f760b35e6591bf252158a41e11ee257f15a1bf297d85211fea\n0a183b12cafe04bfbee760720fce609af6387fa7df584b528aba980278670b86e55376f09757676ed15358814552045007f440959d774dc6a9aaf47a3cd94d29f5ef3caf229883456947071b76843305843d5ebed3564cde1e50b0b720ecfef982eae64f94b4f0203010001",
	})
	store.Create(&hvs.TpmEndorsement{
		ID:           uuid.MustParse("ee37c360-7eae-4250-a677-6ee12adce8e4"),
		HardwareUUID: uuid.MustParse("ee37c360-7eae-4250-a677-6ee12adce8e5"),
		Issuer:       "CN=Infineon OPTIGA(TM) RSA Manufacturing CA 007,OU=OPTIGA(TM) TPM2.0,O=Infineon Technologies AG,C=DE",
		Comment:      "registered by trust agent",
		Revoked:      true,
		Certificate:  "30820122300d06092a864886f70d01010105000382010f003082010a0282010100919eb68d44dfb84a08519c0d8eca57aa37798286769446b42090bad2375dd78e44e7c8dc85400bae3b6a923b6fbe7eeeaf17ac1a95f681d82ca1dc\n33fc4ac389b8f3f73c5b7a91c1096b99729fc6099eb8a11b19c795a88dafacc1e2a381a10d16fea697880cdf270ce10df30ed377e88e48be5004db1e2c2b52f04d9f292be21f760b35e6591bf252158a41e11ee257f15a1bf297d85211fea\n0a183b12cafe04bfbee760720fce609af6387fa7df584b528aba980278670b86e55376f09757676ed15358814552045007f440959d774dc6a9aaf47a3cd94d29f5ef3caf229883456947071b76843305843d5ebed3564cde1e50b0b720ecfef982eae64f94b4f0203010001",
	})
	return store
}
